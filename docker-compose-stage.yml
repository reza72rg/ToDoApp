version: "3.9"

services:
  redis_todoapp:
    container_name: redis_todoapp
    image: redis
    restart: always
    ports:
      - "6380:6379"  # Updated port mapping
    command: redis-server --save 60 1 --loglevel warning

  postgresql:
    image: postgres:latest
    container_name: postgresql
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5433:5432"

  backend_todoapp:
    build: .
    container_name: backend_todoapp
    command: gunicorn core.wsgi --bind 0.0.0.0:8000
    #command: python manage.py make migrations && python manage.py migrate && python manage.py collectstatic --noinput gunicorn core.wsgi --bind 0.0.0.0:8000
    volumes:
      - ./core:/app
      - static_volume:/app/static
      - media_volume:/app/media
    expose:
      - "8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    depends_on:
      - redis_todoapp

  nginx:
    image: nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/static
      - media_volume:/home/app/media
    depends_on:
      - redis_todoapp
      - backend_todoapp
  worker_celery:
    build: .
    container_name: worker_celery
    command: celery -A core worker --loglevel warning
    volumes:
      - ./core:/app/
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_ENGINE=${DATABASE_ENGINE}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_PORT=${DATABASE_PORT}
    depends_on:
      - redis_todoapp
      - postgresql
      - backend_todoapp

volumes:
  static_volume:
  media_volume:
